class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols=grid[0].size();

        queue<pair<int,int>> q;
        int fresh=0;

        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        if(fresh==0) return 0;

        vector<pair<int,int>> directions={{-1,0},{1,0},{0,-1},{0,1}};

        int min=0;
        while(!q.empty()){
            int size=q.size();
            bool rot=false;

            for(int i=0;i<size;i++){
                pair<int,int> current=q.front();
                q.pop();

                for(auto& dir:directions){
                    int newrow=current.first+dir.first;
                    int newcol=current.second+dir.second;

                    if(newrow>=0 && newrow<rows && newcol>=0 && newcol<cols && grid[newrow][newcol]==1){
                        grid[newrow][newcol]=2;
                        q.push({newrow,newcol});
                        fresh--;
                        rot=true;
                    }
                }
            }
            if(rot){
                min++;
            }
            
        }
        if(fresh==0){
            return min;
        }else{
            return -1;
        }
    }
};
