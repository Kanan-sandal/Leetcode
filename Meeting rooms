class Solution{
public:
    bool canAttendMeetings(vector<vector<int>>& intervals){
        if(intervals.empty()) return true;
        sort(intervals.begin(),intervals.end());
        for(int i=1;i<intervals.size();i++){
            if(intervals[i][0]<intervals[i-1][1]){
                return false;
            }
        }
        return true;
    }
};



class Solution{
public:
    bool canAttendMeetings(vector<Interval>& intervals){
        if(intervals.empty()) return true;
        sort(intervals.begin(),intervals.end(),[](Interval& a,Interval& b){
            return a.start<b.start;
        });
        for(int i=1;i<intervals.size();i++){
            if(intervals[i].start<intervals[i-1].end){
                return false;
            }
        }
        return true;
    }
};
