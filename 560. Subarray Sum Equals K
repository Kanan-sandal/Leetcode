1)BRUTE FORCE
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int count=0;
        for(int i=0;i<nums.size();++i){
            int sum=0;
            for(int j=i;j<nums.size();++j){
                sum+=nums[j];
                if(sum==k){
                    count++;
                }
            }
        }
        return count;
    }
};

*------*------*-------*--------*-------*-------*-------*

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum==k) count++;
            }
        }
        return count++;
    }
};



2)OPTIMIZED
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> prefixsumfreq;
        prefixsumfreq[0]=1;
        int sum=0;
        int count=0;
        for(int num:nums){
            sum+=num;

            if(prefixsumfreq.count(sum-k)){
                count+=prefixsumfreq[sum-k];
            }
            prefixsumfreq[sum]++;
        }
        return count;
    }
};

*-----*-----*------*--------*---------*--------*-----------*

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        int count=0;
        vector<int> prefixsum(n,0);
        prefixsum[0]=nums[0];
        for(int i=1;i<n;i++){
            prefixsum[i]=prefixsum[i-1]+nums[i];
        }
        unordered_map<int,int> map;
        for(int j=0;j<n;j++){
            if(prefixsum[j]==k) count++;

            int val=prefixsum[j]-k;

            if(map.find(val)!=map.end()){
                count+=map[val];
            }

            if(map.find(prefixsum[j])==map.end()){
                map[prefixsum[j]]=0;
            }
            map[prefixsum[j]]++;
        }
        return count;
    }
};


----*-----*-----*------*------*------*------*-----*------*-------*

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        mp[0]=1;
        int count=0,sum=0;

        for(int num:nums){
            sum+=num;
            if(mp.count(sum-k)){
                count+=mp[sum-k];
            }
            mp[sum]++;
        }
        return count;
    }
};
