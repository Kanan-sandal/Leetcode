class Solution {
public:
    vector<vector<string>> result;
    void backtrack(int row,int n,vector<int>& queens,vector<bool>& cols,vector<bool>& diag,vector<bool>& antidiag){
        if(row==n){
            vector<string> board(n,string(n,'.'));
            for(int r=0;r<n;r++){
                board[r][queens[r]]='Q';
            }
            result.push_back(board);
            return;
        }
        for(int c=0;c<n;c++){
            if(cols[c] || diag[row+c] || antidiag[row-c+n-1]) continue;

            queens[row]=c;
            cols[c]=diag[row+c]=antidiag[row-c+n-1]=true;

            backtrack(row+1,n,queens,cols,diag,antidiag);

            cols[c]=diag[row+c]=antidiag[row-c+n-1]=false;
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<int> queens(n,0);
        vector<bool> cols(n,false);
        vector<bool> diag(2*n-1,false);
        vector<bool> antidiag(2*n-1,false);

        backtrack(0,n,queens,cols,diag,antidiag);
        return result;
    }
};
