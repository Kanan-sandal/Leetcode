/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "null,";
        return to_string(root->val)+","+serialize(root->left)+serialize(root->right);
    }

    TreeNode* helper(queue<string>& nodes){
        string val=nodes.front();
        nodes.pop();
        if(val=="null") return nullptr;

        TreeNode* node=new TreeNode(stoi(val));
        node->left=helper(nodes);
        node->right=helper(nodes);
        return node;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        string item;
        queue<string> nodes;

        while(getline(ss,item,',')){
            nodes.push(item);
        }
        return helper(nodes);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));





OR
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "";
        string result;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* node=q.front();q.pop();
            if(node){
                result+=to_string(node->val)+",";
                q.push(node->left);
                q.push(node->right);
            }else{
                result+="null,";
            }
        }
        return result;

    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data.empty()) return nullptr;
        stringstream ss(data);
        string val;
        getline(ss,val,',');
        TreeNode* root=new TreeNode(stoi(val));
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            TreeNode* node=q.front();q.pop();

            if(getline(ss,val,',')){
                if(val!="null"){
                    node->left=new TreeNode(stoi(val));
                    q.push(node->left);
                }
            }
            if(getline(ss,val,',')){
                if(val!="null"){
                    node->right=new TreeNode(stoi(val));
                    q.push(node->right);
                }
            }
        }
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));











/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root) return "X,";
        return to_string(root->val)+","+serialize(root->left)+serialize(root->right);
    }

    TreeNode* deserializehepher(queue<string>& nodes){
        string val=nodes.front();
        nodes.pop();
        if(val=="X") return nullptr;

        TreeNode* root=new TreeNode(stoi(val));
        root->left=deserializehepher(nodes);
        root->right=deserializehepher(nodes);
        return root;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        queue<string> nodes;
        stringstream ss(data);
        string val;
        while(getline(ss,val,',')){
            if (!val.empty()) nodes.push(val);
        }
        return deserializehepher(nodes);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));
