class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty() || matrix[0].empty()) return false;
        int m=matrix.size();
        int n=matrix[0].size();
        int left=0;
        int right=m*n-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            int midval=matrix[mid/n][mid%n];

            if(midval==target) return true;
            else if(midval<target) left=mid+1;
            else right=mid-1;
        }
        return false;
    }
};


BRUTE FORCE:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        for(int i=0;i<matrix.size();i++){
            for(int j=0;j<matrix[i].size();j++){
                if(matrix[i][j]==target){
                    return true;
                }
            }
        }
        return false;
    }
};


USING BINARY SEARCH:
class Solution {
public:
    bool searchInRow(vector<vector<int>>& matrix, int target,int row){
        int n=matrix[0].size();
        int start=0;
        int end=n-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target==matrix[row][mid]){
                return true;
            }else if(target>matrix[row][mid]){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        return false;
    } 
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int startRow=0;
        int endRow=m-1;
        while(startRow<=endRow){
            int midRow=startRow+(endRow-startRow)/2;
            if(target>=matrix[midRow][0] && target<=matrix[midRow][n-1]){
                return searchInRow(matrix,target,midRow);
            }else if(target>=matrix[midRow][n-1]){
                startRow=midRow+1;
            }else{
                endRow=midRow-1;
            }
        }
        return false;
    }
};




BEST APPROACH:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();
        int low=0;
        int high=n*m-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            int row=mid/m;
            int col=mid%m;
            if(matrix[row][col]==target){
                return true;
            }else if(matrix[row][col]<target){
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        return false;
    }
};
