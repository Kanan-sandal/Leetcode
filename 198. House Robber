class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];

        vector<int> dp(n);
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<n;i++){
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[n-1];
    }
};





class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1) return nums[0];

        int prev2=0;
        int prev1=nums[0];

        for(int i=1;i<n;i++){
            int curr=max(prev1,prev2+nums[i]);
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
};








class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==1) return nums[0];
        int prev2=nums[0];
        int prev1=max(nums[0],nums[1]);
        for(int i=2;i<n;i++){
            int curr=max(prev1,nums[i]+prev2);
            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
};





class Solution{
public:
    int rob(vector<int>& nums){
        if(nums.size()==1) return nums[0];
        int prev2=0;
        int prev1=nums[0];

        for(int i=1;i<nums.size();i++){
            int take=nums[i]+prev2;
            int skip=prev1;
            int curr=max(take,skip);

            prev2=prev1;
            prev1=curr;
        }
        return prev1;
    }
};
