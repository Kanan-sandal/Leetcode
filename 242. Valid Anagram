class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()){
            return false;
        }
        unordered_map<char,int> mp;
        int n=s.size();
        for(int i=0;i<n;i++){
            char ch=s[i];
            mp[ch]++;
        }
        for(int i=0;i<t.size();i++){
            char c1=t[i];
            auto it=mp.find(c1);
            if(it!=mp.end()){
                if(it->second>0){
                    mp[c1]--;
                }else{
                    return false;
                }
            }else{
                return false;
            }
        }
        return true;
        
    }
};





BEST:
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()) return false;

        vector<int> freq(26,0);
        for(char c:s) freq[c-'a']++;
        for(char c:t){
            freq[c-'a']--;
            if(freq[c-'a']<0) return false;
        }
        return true;
    }
};


SORTING:
class Solution{
public:
    bool isAnagram(string s,string t){
        if(s.size()!=t.size()) return false;
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        return s==t;
    }
};



HASHMAP/FREQUENCY ARRAY:
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.size()!=t.size()) return false;

        vector<int> count(26,0);

        for(char c:s){
            count[c-'a']++;
        }
        for(char c:t){
            count[c-'a']--;
        }
        for(int c:count){
            if(c!=0) return false;
        }
        return true;
    }
};
