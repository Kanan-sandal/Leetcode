class Solution{
public:
  void dfs(int node,vector<vector<int>>& adj,vector<bool>& visited){
    visited[node]=true;
    for(int neighbor:adj[node]){
      if(!visited[neighbor]){
        dfs(neighbor,adj,visited);
      }
   }
}
int countComponents(int n,vector<vector<int>>& edges){
  vector<vector<int>> adj(n);
  for(auto& e:edges){
    adj[e[0]].push_back(e[1]);
    adj[e[1]].push_back(e[0]);
  }
  vector<bool> visited(n,false);
  for(int i=0;i<n;i++){
    if(!visited[i]){
      count++;
      dfs(i,adj,visited);
      }
    }
    return count;
  }
};
