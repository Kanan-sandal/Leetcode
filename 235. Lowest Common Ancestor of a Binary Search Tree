ITERATIVE:
class Solution{
public:
    TreeNode* lowestCommonAncestor(TreeNode* root,TreeNode* p,TreeNode* q){
        if(!root) return nullptr;
        while(root){
            if(p->val<root->val && q->val<root->val){
                root=root->left;
            }else if(p->val>root->val && q->val>root->val){
                root=root->right;
            }else{
                return root;
            }
        }
        return nullptr;
    }
};



RECURSIVE:
class Solution{
public:
    TreeNode* lowestCommonAncestor(TreeNode* root,TreeNode* p,TreeNode* q){
        if(!root) return nullptr;
        if(p->val<root->val && q->val<root->val){
            return lowestCommonAncestor(root->left,p,q);
        }else if(p->val>root->val && q->val>root->val){
            return lowestCommonAncestor(root->right,p,q);
        }else{
            return root;
        }
    }
};
