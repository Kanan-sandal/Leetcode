BRUTE FORCE   O(n^2)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        for(int val:nums){
            int freq=0;
            for(int element:nums){
                if(element==val){
                    freq++;
                }
            }
            if(freq>nums.size()/2){
                return val;
            }
        }
      return -1;
    }
};


BETTER SOLUTION   O(n logn)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int freq=1;
        int ans=nums[0];
        for(int i=1;i<nums.size();i++){
            if(nums[i]==nums[i-1]){
                freq++;
            }else{
                freq=1;
                ans=nums[i];
            }
            if (freq>nums.size()/2){
            return ans;
        }
    }
   return nums[0];
    }
};



BEST APPROACH   O(n)   [moore's voting algorithm]
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int freq=0;
        int ans=0;
        for(int i=0;i<nums.size();i++){
            if(freq==0){
                ans=nums[i];
                freq=1;
            }else if(ans==nums[i]){
                freq++;
            }else{
                freq--;
            }
        }
        return ans;
    }
};

