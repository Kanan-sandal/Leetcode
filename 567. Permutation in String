OPTIMAL:
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        int n1=s1.length();
        int n2=s2.length();
        if(n1>n2){
            return false;
        }
        vector<int> freq(26,0),window(26,0);
        for(int i=0;i<n1;++i){
            freq[s1[i]-'a']++;
            window[s2[i]-'a']++;
        }
        if(freq==window){
            return true;
        }
        for(int i=n1;i<n2;++i){
            window[s2[i-n1]-'a']--;
            window[s2[i]-'a']++;
            if(freq==window) return true;
        }
        return false;
    }
};





NOT OPTIMAL:
class Solution {
public:
    bool isFreqSame(int freq1[],int freq2[]){
        for(int i=0;i<26;i++){
            if(freq1[i]!=freq2[i]){
                return false;
            }
        }
        return true;
    }
    bool checkInclusion(string s1, string s2) {
        int freq[26]={0};
        for(int i=0;i<s1.length();i++){
            freq[s1[i]-'a']++;
        }

        int windsize=s1.length();

        for(int i=0;i<s2.length();i++){
            int windidx=0;
            int index=i;
            int windfreq[26]={0};

            while(windidx<windsize && index<s2.length()){
                windfreq[s2[index]-'a']++;
                windidx++;
                index++;
            }
            if(isFreqSame(freq,windfreq)){
                return true;
            }
        }
        return false;
    }
};








BEST:
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s1.size()>s2.size()) return false;
        vector<int> freq1(26,0),freq2(26,0);
        for(char c: s1) freq1[c-'a']++;
        for(int i=0;i<s2.size();i++){
            freq2[s2[i]-'a']++;


            if(i>=s1.size()){
                freq2[s2[i-s1.size()]-'a']--;
            }
            if(freq1==freq2) return true;
        }
        return false;
    }
};
