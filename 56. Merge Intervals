1)BRUTE FORCE
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> result;
        sort(intervals.begin(),intervals.end());

        for (int i = 0; i < intervals.size(); ++i) {
            bool merged = false;

            for (int j = 0; j < result.size(); ++j) {
                if (intervals[i][0] <= result[j][1] && intervals[i][1] >= result[j][0]) {
                    result[j][0] = min(result[j][0], intervals[i][0]);
                    result[j][1] = max(result[j][1], intervals[i][1]);
                    merged = true;
                    break;
                }
            }

            if (!merged) {
                result.push_back(intervals[i]);
            }
        }

        return result;
    }
};

2)OPTIMIZED
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        if(intervals.empty()) return{};
        sort(intervals.begin(),intervals.end());
        vector<vector<int>> result;
        result.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++){
            if(intervals[i][0]<=result.back()[1]){
                result.back()[1]=max(result.back()[1],intervals[i][1]);
            }else{
                result.push_back(intervals[i]);
            }
        }
        return result;
    }
};




class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& arr) {
        int n=arr.size();
        sort(arr.begin(),arr.end());
        vector<vector<int>> ans;
        for(int i=0;i<n;i++){
            int start=arr[i][0];
            int end=arr[i][1];
            if(!ans.empty() && end<=ans.back()[1]){
                continue;
            }
            for(int j=i+1;j<n;j++){
                if(arr[j][0]<=end){
                    end=max(end,arr[j][1]);
                }
                else{
                    break;
                }
            }
            ans.push_back({start,end});
        }
        return ans;
    }
};
