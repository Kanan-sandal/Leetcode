1)BRUTE FORCE
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> result(n);
        for(int i=0;i<n;i++){
            int product=1;
            for(int j=0;j<n;j++){
                if(i!=j){
                    product*=nums[j];
                }
            }
            result[i]=product;
        }
        return result;
    }
};

2)OPTIMIZED
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> result(n,1);

        int left=1;
        for(int i=0;i<n;i++){
            result[i]=left;
            left*=nums[i];
        }
        int right=1;
        for(int i=n-1;i>=0;i--){
            result[i]*=right;
            right*=nums[i];
        }
        return result;
    }
};






BEST:
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> ans(n,1);
       
        for(int i=1;i<n;i++){
            ans[i]=ans[i-1]*nums[i-1];
        }
        int suffix=1;
        for(int i=n-2;i>=0;i--){
            suffix*=nums[i+1];
            ans[i]*=suffix;
        }
       
        return ans;
    }
};


class Solution{
public:
    vector<int> productExceptSelf(vector<int>& nums){
        int n=nums.size();
        vector<int> answer(n,1);

        int prefix=1;
        for(int i=0;i<n;i++){
            answer[i]=prefix;
            prefix*=nums[i];
        }
        int suffix=1;
        for(int i=n-1;i>=0;i--){
            answer[i]*=suffix;
            suffix*=nums[i];
        }
        return answer;
    }
};
