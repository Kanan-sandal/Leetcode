DYNAMIC PROGRAMMING
class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.length();
        if(n==0) return "";

        vector<vector<bool>> dp(n, vector<bool>(n,false));
            int start=0;
            int maxlength=1;

            for(int i=0;i<n;i++){
                dp[i][i]=true;
            }
            for(int i=0;i<n-1;i++){
                if(s[i]==s[i+1]){
                    dp[i][i+1]=true;
                    start=i;
                    maxlength=2;
                }
            }
            for(int len=3;len<=n;len++){
                for(int i=0;i<=n-len;i++){
                    int j=i+len-1;

                    if(s[i]==s[j] && dp[i+1][j-1]){
                        dp[i][j]=true;
                        start=i;
                        maxlength=len;
                    }
                }
        }
        return s.substr(start,maxlength);
    }
};




EXPAND AROUND CENTER(best)
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.empty()) return "";

        int start=0;
        int end=0;

        for(int i=0;i<s.size();i++){
            int len1=expandaroundcenter(s,i,i);
            int len2=expandaroundcenter(s,i,i+1);
            int len=max(len1,len2);

            if(len>end-start){
                start=i-(len-1)/2;
                end=i+len/2;
            }
        }
        return s.substr(start,end-start+1);
    }
    int expandaroundcenter(const string&s, int left, int right){
        while(left>=0 && right<s.length() && s[left]==s[right]){
            left--;
            right++;
        }
        return right-left-1;
    }
};
