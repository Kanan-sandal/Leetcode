class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        for(char c:s){
            if(c=='('|| c=='{'|| c=='['){
                st.push(c);
            }else{
                if (st.empty()) return false;

                if((c==')' && st.top()!='(')||
                    (c=='}' && st.top()!='{')||
                     (c==']' && st.top()!='[')) return false;
                st.pop();
            }
        }
        return st.empty();
    }
};



class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        unordered_map<char,char> mp={{')','('},{'}','{'},{']','['}};

        for(char c:s){
            if(mp.count(c)){
                if(st.empty() || st.top()!=mp[c]) return false;
                st.pop();
            }else{
                st.push(c);
            }
        }
        return st.empty();
    }
};



class Solution{
public:
    bool isValid(string s){
        stack<char> st;
        for(char c:s){
            if(c=='(' || c=='{' || c=='['){
                st.push(c);
            }else{
                if(st.empty()) return false;
                char top=st.top();
                st.pop();
                if((c==')' && top!='(')||
                (c=='}' && top!='{')||
                (c==']' && top!='[')){
                    return false;
                }
            }
        }
        return st.empty();
    }
};
