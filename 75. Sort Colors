BRUTE FORCE:        O(nlogn)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(),nums.end());
    }
};

BETTER:    O(n)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int count0=0;
        int count1=0;
        int count2=0;

        for(int i=0;i<n;i++){
            if(nums[i]==0) count0++;
            else if(nums[i]==1) count1++;
            else count2++;
        }
        int idx=0;
        for(int i=0;i<count0;i++){
            nums[idx++]=0;
        }
       
        for(int i=0;i<count1;i++){
            nums[idx++]=1;
        }
        
        for(int i=0;i<count2;i++){
            nums[idx++]=2;
        }
    }
};


OPTIMAL:    O(n)
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int n=nums.size();
        int mid=0;
        int low=0;
        int high=n-1;
        while(mid<=high){
            if(nums[mid]==0){
                swap(nums[mid],nums[low]);
                mid++;
                low++;
            }else if(nums[mid]==1){
                mid++;
            }else{
                swap(nums[high],nums[mid]);
                high--;
            }
        }
    }
};
