class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<int> ans;
        int srow=0;
        int scol=0;
        int erow=m-1;
        int ecol=n-1;
        while(srow<=erow && scol<=ecol){
            for(int j=scol;j<=ecol;j++){
                ans.push_back(matrix[srow][j]);
            }
            for(int i=srow+1;i<=erow;i++){
                ans.push_back(matrix[i][ecol]);
            }
            for(int j=ecol-1;j>=scol;j--){
                if(srow==erow){
                    break;
                }
                ans.push_back(matrix[erow][j]);
            }
            for(int i=erow-1;i>=srow+1;i--){
                if(scol==ecol){
                    break;
                }
                ans.push_back(matrix[i][scol]);
            }
            srow++;
            scol++;
            erow--;
            ecol--;
        }
        return ans;
    }
};




BETTER EDGE CASE HANDLING:
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        vector<int> ans;
        int srow=0;
        int scol=0;
        int erow=m-1;
        int ecol=n-1;
        while(srow<=erow && scol<=ecol){
            for(int j=scol;j<=ecol;j++){
                ans.push_back(matrix[srow][j]);
            }
            for(int i=srow+1;i<=erow;i++){
                ans.push_back(matrix[i][ecol]);
            }
            if(srow<erow){
            for(int j=ecol-1;j>=scol;j--){
                ans.push_back(matrix[erow][j]);
            }
            }
            if(scol<ecol){
            for(int i=erow-1;i>=srow+1;i--){
                ans.push_back(matrix[i][scol]);
            }
            }
            srow++;
            scol++;
            erow--;
            ecol--;
        }
        return ans;
    }
};






class Solution{
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix){
        vector<int> res;
        if(matrix.empty()) return res;

        int top=0,bottom=matrix.size()-1;
        int left=0,right=matrix[0].size()-1;

        while(top<=bottom && left<=right){
            for(int j=left;j<=right;j++)
                res.push_back(matrix[top][j]);
            top++;

            for(int i=top;i<=bottom;i++)
                res.push_back(matrix[i][right]);
            right--;

            if(top<=bottom){
                for(int j=right;j>=left;j--)
                    res.push_back(matrix[bottom][j]);
                bottom--;
            }

            if(left<=right){
                for(int i=bottom;i>=top;i--)
                    res.push_back(matrix[i][left]);
                left++;
            }
        }
        return res;
    }
};
