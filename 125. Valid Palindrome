class Solution {
public:
    bool isalphanum(char ch){
        if((ch>='0' && ch<='9')||
        (tolower(ch)>='a' && tolower(ch)<='z')){
            return true;
        }
        return false;
    }
    bool isPalindrome(string s) {
        int n=s.size();
        int start=0;
        int end=n-1;
        while(start<end){
            if(!isalphanum(s[start])){
                start++;
                continue;
            }
            if(!isalphanum(s[end])){
                end--;
                continue;
            }
            if(tolower(s[start])!=tolower(s[end])){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
};





IN-BUILT FUNCTION:
#include <cctype> 
class Solution {
public:
   bool isPalindrome(string s) {
        int n=s.size();
        int start=0;
        int end=n-1;
        while(start<end){
            if(!isalnum(s[start])){
                start++;
                continue;
            }
            if(!isalnum(s[end])){
                end--;
                continue;
            }
            if(tolower(s[start])!=tolower(s[end])){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
};





BEST:(2 pointer approach)
class Solution {
public:
    bool isPalindrome(string s) {
        int left=0;
        int right=s.size()-1;
        while(left<right){
            while(left<right && !isalnum(s[left])) left++;
            while(left<right && !isalnum(s[right])) right--;

            if(tolower(s[left])!=tolower(s[right]))
                return false;

                left++;
                right--;
        }
        return true;
    }
};



class Solution{
public:
    bool isPalindrome(string s){
        int left=0,right=s.size()-1;
        while(left<right){
            while(left<right && !isalnum(s[left])) left++;
            while(left<right && !isalnum(s[right])) right--;

            if(tolower(s[left])!=tolower(s[right])) return false;
            left++;
            right--;
        }
        return true;
    }
};
