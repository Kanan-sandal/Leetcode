class LRUCache{
private:
    struct Node{
        int key,val;
        Node* prev;
        Node* next;
        Node(int k,int v):key(k),val(v),prev(nullptr),next(nullptr){}
    };
    int capacity;
    unordered_map<int,Node*> mp;
    Node* head;
    Node* tail;

    void remove(Node* node){
        node->prev->next=node->next;
        node->next->prev=node->prev;
    }
    void insertToHead(Node* node){
        node->next=head->next;
        node->prev=head;
        head->next->prev=node;
        head->next=node;
    }
public:
    LRUCache(int cap):capacity(cap){
        head=new Node(0,0);
        tail=new Node(0,0);
        head->next=tail;
        tail->prev=head;
    }
    int get(int key){
        if(mp.find(key)==mp.end()) return -1;
        Node* node=mp[key];
        remove(node);
        insertToHead(node);
        return node->val;
    }
    void put(int key,int value){
        if(mp.find(key)!=mp.end()){
            Node* node=mp[key];
            node->val=value;
            remove(node);
            insertToHead(node);
        }else{
            if(mp.size()==capacity){
                Node* lru=tail->prev;
                remove(lru);
                mp.erase(lru->key);
                delete lru;
            }
            Node* node=new Node(key,value);
            insertToHead(node);
            mp[key]=node;
        }
    }
    ~LRUCache(){
        Node* curr=head;
        while(curr){
            Node* nextNode=curr->next;
            delete curr;
            curr=nextNode;
        }
    }
};
/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
