class Solution {
public:
    int strStr(string haystack, string needle) {
        int n=haystack.size(),m=needle.size();
        for(int i=0;i<=n-m;i++){
            int j=0;
            while(j<m && haystack[i+j]==needle[j]){
                j++;
            }
            if(j==m) return i;
        }
        return -1;
    }
};





KMP:
class Solution {
public:
    vector<int> buildlps(string& needle){
        int m=needle.size();
        vector<int> lps(m,0);
        int len=0,i=1;

        while(i<m){
            if(needle[i]==needle[len]){
                len++;
                lps[i]=len;
                i++;
            }else{
                if(len!=0){
                    len=lps[len-1];
                }else{
                    lps[i]=0;
                    i++;
                }
            }
        }
        return lps;
    }
    int strStr(string haystack, string needle) {
        int n=haystack.size(),m=needle.size();
        if(m==0) return 0;
        vector<int> lps=buildlps(needle);
        int i=0,j=0;

        while(i<n){
            if(haystack[i]==needle[j]){
                i++,j++;
                if(j==m) return i-m;
            }else{
                if(j!=0){
                    j=lps[j-1];
                }else{
                    i++;
                }
            }
        }
        return -1;
    }
};
