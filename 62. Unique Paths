BRUTE FORCE(TLE):                                                  ->(Time and Space complexity will be exponential in this case)
class Solution {
public:
    int solve(int i, int j, int m, int n) {
        if (i == m - 1 && j == n - 1) return 1;  
        if (i >= m || j >= n) return 0;          
        return solve(i + 1, j, m, n) + solve(i, j + 1, m, n);
    }
    int uniquePaths(int m, int n) {
        return solve(0,0,m,n);
    }
};


BETTER:                              O(N X M)
class Solution {
public:
    int solve(int i,int j,int m,int n,vector<vector<int>>& dp){
        if(i==m-1 && j==n-1) return 1;
        if(i>=m || j>=n) return 0;
        if(dp[i][j]!=-1)  return dp[i][j];
        return dp[i][j]=solve(i+1,j,m,n,dp)+solve(i,j+1,m,n,dp);
    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return solve(0,0,m,n,dp);
    }
};




OPTIMAL:                             TC : O(M-1) OR O(N-1)
class Solution {
public:
    int uniquePaths(int m, int n) {
        int N=n+m-2;
        int r=m-1;
        double res=1;
        for(int i=1;i<=r;i++){
            res=res*(N-r+i)/i;
        }
        return res;
    }
};





class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m,vector<int>(n,1));
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }
};
