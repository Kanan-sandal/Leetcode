1)BRUTE FORCE
class Solution {
public:
    bool isanagram(string& s1,string& s2){
        if(s1.length()!=s2.length()) return false;
        string a=s1;
        string b=s2;
        sort(a.begin(),a.end());
        sort(b.begin(),b.end());
        return a==b;
    }
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> result;
        for(string& str:strs){
            bool found=false;
            for(auto& group:result){
                if(isanagram(group[0],str)){
                    group.push_back(str);
                    found=true;
                    break;
                }
            }
            if(!found){
                result.push_back({str});
            }
        }
        return result;
    }
};







best:
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string>> mp;
        for(string s: strs){
            string key=s;
            sort(key.begin(),key.end());
            mp[key].push_back(s);
        }
        vector<vector<string>> result;
        for(auto& p:mp){
            result.push_back(p.second);
        }
        return result;
    }
};


2)OPTIMIZED
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string>> mp;
        for(string s: strs){
            string key=s;
            sort(key.begin(),key.end());
            mp[key].push_back(s);
        }
        vector<vector<string>> result;
        for(auto& pair:mp){
            result.push_back(pair.second);
        }
        return result;
    }
};


3)OPTIMIZED
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string>> mp;
        for(string s:strs){
            int count[26]={0};
            for(char c:s){
                count[c-'a']++;
            }
            string key;
            for(int i=0;i<26;++i){
                key+=to_string(count[i]+'#');
            }
            mp[key].push_back(s);
        }
        vector<vector<string>> result;
        for(auto& pair:mp){
            result.push_back(pair.second);
        }
        return result;
    }
};
