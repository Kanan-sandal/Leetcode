class Solution {
public:
    int longestSubstring(string s, int k) {
        return helper(s,0,s.length(),k);
    }
private:
    int helper(const string&s, int start,int end,int k){
        if(end-start<k) return 0;

        unordered_map<char,int> freq;
        for(int i=start;i<end;++i){
            freq[s[i]]++;
        }
        bool is_valid=true;
        for(auto& pair:freq){
            if(pair.second<k){
                is_valid=false;
                break;
            }
        }
        if(is_valid){
            return end-start;
        }
        int max_len=0;
        int newstart=start;
        for(int i=start;i<end;++i){
            if(freq[s[i]]<k){
                max_len=max(max_len,helper(s,newstart,i,k));
                newstart=i+1;
            }
        }
        max_len=max(max_len,helper(s,newstart,end,k));
        return max_len;
    }
};
