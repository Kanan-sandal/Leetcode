class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> mp;
        for(int i=0;i<nums.size();++i){
            int comp=target-nums[i];
            if(mp.count(comp)){
                return{mp[comp],i};
            }
            mp[nums[i]]=i;
        }
        return {};
    }
};




class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> map;
        vector<int> ans;
        for(int i=0;i<nums.size();i++){
            int first=nums[i];
            int second=target-first;
            if(map.find(second)!=map.end()){
                ans.push_back(map[second]);
                ans.push_back(i);
                break;
            }
            map[first]=i;
        }
        return ans;
    }
};





class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
        unordered_map<int,int> mp;
        for(int i=0;i<n;i++){
            int comp=target-nums[i];
            if(mp.count(comp)){
                return {mp[comp],i};
            }
            mp[nums[i]]=i;
        }
        return {};
    }
};
