class Solution {
public:
    string minWindow(string s, string t) {
        if(t.size()>s.size()) return "";

        unordered_map<char,int> need;
        for(char c: t) need[c]++;

        unordered_map<char,int> window;
        int have =0, needcount=need.size();
        int left=0,minlen=INT_MAX,start=0;

        for(int right=0;right<s.size();right++){
            char c=s[right];
            window[c]++;


            if(need.count(c) && window[c]==need[c]){
                have++;
            }

            while(have==needcount){
                if((right-left+1)<minlen){
                    minlen=right-left+1;
                    start=left;
                }


                char leftchar=s[left];
                window[leftchar]--;
                if(need.count(leftchar) && window[leftchar]<need[leftchar]){
                    have--;
                }
                left++;
            }
        }
        return (minlen==INT_MAX)? "":s.substr(start,minlen);
    }
};
