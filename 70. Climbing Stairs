class Solution {
public:
    int climbStairs(int n) {
        if(n==1) return 1;
        if(n==2) return 2;
        

        vector<int> dp(n+1);
        dp[1]=1;
        dp[2]=2;
        for(int i=3;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};




DP:
class Solution {
public:
    int climbStairs(int n) {
        if(n<=2) return n;
        vector<int> dp(n+1);
        dp[1]=1;
        dp[2]=2;
        for(int i=3;i<=n;++i){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
};


Variables:
class Solution {
public:
    int climbStairs(int n) {
        if(n<=2) return n;
        int a=1,b=2;
        for(int i=3;i<=n;i++){
            int c=a+b;
            a=b;
            b=c;
        }
        return b;
    }
};





class Solution{
public:
    int climbStairs(int n){
        if(n<=2) return n;
        int prev1=1;
        int prev2=2;

        for(int i=3;i<=n;i++){
            int curr=prev1+prev2;
            prev1=prev2;
            prev2=curr;
        }
        return prev2;
    }
};



Recursive + Memoization Approach:
class Solution{
public:
    int dfs(int n,vector<int>& memo){
        if(n<=2) return n;
        if(memo[n]!=-1) return memo[n];
        memo[n]=dfs(n-1,memo)+dfs(n-2,memo);
        return memo[n];
    }
    int climbStairs(int n){
        vector<int> memo(n+1,-1);
        return dfs(n,memo);
    }
};
