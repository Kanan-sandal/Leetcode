1) BRUTE FORCE
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int maxsum=nums[0];
        int n=nums.size();

        for(int i=0;i<n;++i){
            int currentsum=0;
            for(int j=i;j<n;++j){
                currentsum+=nums[j];
                maxsum=max(maxsum,currentsum);
            }
        }
        return maxsum;
    }
};

OR

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxsum=INT_MIN;
        for(int start=0;start<n;start++){
            int currsum=0;
            for(int end=start;end<n;end++){
                currsum+=nums[end];
                maxsum=max(maxsum,currsum);
            }
        }
        return maxsum;
    }
};

2)OPTIMIZED 
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currentsum=nums[0];
        int maxsum=nums[0];
        for(int i=1;i<nums.size();++i){
            currentsum=max(nums[i],currentsum+nums[i]);
            maxsum=max(maxsum,currentsum);
        }
        return maxsum;
    }
};

KADANE'S ALGORITHM
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currsum=0;
        int maxsum=INT_MIN;
        for(int i=0;i<nums.size();i++){
            currsum+=nums[i];
            maxsum=max(maxsum,currsum);
            if(currsum<0){
                currsum=0;
            }
        }
        return maxsum;
    }
};




class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxsum=INT_MIN;
        int start=0;
        int end=0;
        int tempstart=0;
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            if(sum>maxsum){
                maxsum=sum;
                start=tempstart;
                end=i;
            }
            if(sum<0){
                sum=0;
                tempstart=i+1;
            }
        }
        return maxsum;
    }
};




class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxsum=INT_MIN;
        int sum=0;
        for(int i=0;i<n;i++){
            sum += nums[i];
            if(sum>maxsum){
                maxsum=sum;
            }
            if(sum<0){
                sum=0;

            }
        }
        return maxsum;
    }
};




class Solution{
public:
    int maxSubArray(vector<int>& nums){
        int maxsum=nums[0];
        int currsum=nums[0];
        for(int i=1;i<nums.size();i++){
            currsum=max(nums[i],currsum+nums[i]);
            maxsum=max(maxsum,currsum);
        }
        return maxsum;
    }
};
