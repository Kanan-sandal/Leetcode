ITERATIVE
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int start=0;
        int end=n-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(target>nums[mid]){
                start=mid+1;
            }else if(target<nums[mid]){
                end=mid-1;
            }else if(target==nums[mid]){
                return mid;
            }
        }
        return -1;
    }
};


RECURSIVE:
class Solution {
public:
    int search(vector<int>& nums, int target) {
        return search(nums, target, 0, nums.size() - 1);
    }
private:
    int search(vector<int>& nums, int target,int start,int end) {
        while(start<=end){
           int mid=start+(end-start)/2;
           if(target>nums[mid]){
                return search(nums,target,mid+1,end);
            }else if(target<nums[mid]){
                return search(nums,target,start,mid-1);
            }else{
                return mid;
            }
        }
        return -1;
    }
};





class Solution {
public:
    int binsearch(vector<int>& nums, int target,int start,int end){
        if(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid]<target){
                return binsearch(nums,target,mid+1,end);
            }else {
                return binsearch(nums,target,start,mid-1);
            }
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        return binsearch(nums,target,0,nums.size()-1);
    }
};
