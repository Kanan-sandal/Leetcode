class Solution {
public:
    int reverse(int x) {
        int revnum=0;
        while(x!=0){
            int last=x%10;

            if(revnum>INT_MAX/10 || (revnum==INT_MAX/10 && last>7)){
                return 0;
            }
            if(revnum<INT_MIN/10 || (revnum==INT_MIN/10 && last<-8)){
                return 0;
            }
            revnum=(revnum*10)+last;
            x/=10;
        }
        return revnum;
    }
    bool isPalindrome(int x){
        if(x<0){
            return false;
        }
        int reversed=reverse(x);
        return x==reversed;
    }
};



USING STRING:
class Solution {
public:
    bool isPalindrome(int x) {
        string s=to_string(x);
        int start=0;
        int end=s.size()-1;
        while(start<end){
            if(s[start]!=s[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
};



USING HELPER FUNCTION:
class Solution {
public:
    int reverse(int n){
        int revnum=0;
        while(n!=0){
            int digit=n%10;
            if(revnum>INT_MAX/10 || revnum<INT_MIN/10){
                return 0;
            }
            revnum=revnum*10+digit;
            n=n/10;
        }
        return revnum;
    }
    bool isPalindrome(int n) {
        if(n<0) return false;
        int revnum=reverse(n);
        return n==revnum;
    }
};








class Solution {
public:
    bool isPalindrome(int x) {
        if(x<0) return false;
        long rev=0;
        int temp=x;
        while(temp!=0){
            int digit=temp%10;
            rev=rev*10+digit;
            temp/=10;
        }
        return(rev==x);
    }
};
