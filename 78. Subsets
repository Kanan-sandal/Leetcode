RECURSIVE
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result;
        vector<int> current;
        backtrack(0,nums,current,result);
        return result;
    }
    void backtrack(int index,vector<int>& nums,vector<int>& current,vector<vector<int>>& result){
        result.push_back(current);
        for(int i=index;i<nums.size();++i){
            current.push_back(nums[i]);
            backtrack(i+1,nums,current,result);
            current.pop_back();
        }
    }
};

ITERATIVE
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result={{}};
        for(int num:nums){
            int n=result.size();
            for(int i=0;i<n;++i){
                vector<int>subset=result[i];
                subset.push_back(num);
                result.push_back(subset);
            }
        }
        return result;
    }
};



class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> result={{}};
        for(int num:nums){
            int n=result.size();
            for(int i=0;i<n;i++){
                vector<int> subset=result[i];
                subset.push_back(num);
                result.push_back(subset);
            }
        }
        return result;
    }
};



class Solution {
public:
    void backtrack(vector<int>& nums,int start,vector<int>& path,vector<vector<int>>& res){
        res.push_back(path);
        for(int i=start;i<nums.size();i++){
            path.push_back(nums[i]);
            backtrack(nums,i+1,path,res);
            path.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> path;
        backtrack(nums,0,path,res);
        return res;
    }
};





class Solution{
public:
    void backtrack(vector<int>& nums,int start,vector<int>& path,vector<vector<int>>& res){
        res.push_back(path);
        for(int i=start;i<nums.size();i++){
            path.push_back(nums[i]);
            backtrack(nums,i+1,path,res);
            path.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums){
        vector<vector<int>> res;
        vector<int> path;
        backtrack(nums,0,path,res);
        return res;
    }
};
