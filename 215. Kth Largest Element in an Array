1) BRUTE FORCE
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(),nums.end(),greater<int>());
        return nums[k-1];
        
    }
};




2)OPTIMIZED 
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>>minHeap;
        for(int num:nums){
            minHeap.push(num);
            if(minHeap.size()>k){
                minHeap.pop();
            }
        }
        return minHeap.top();
    }
};



3) MOST OPTIMIZED
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        return quickselect(nums,0,nums.size()-1,nums.size()-k);
    }
private:
    int quickselect(vector<int> &nums,int left,int right,int index){
        int pivot=nums[right];
        int partitionindex=left;

        for(int i=left;i<right;++i){
            if(nums[i]<pivot){
                swap(nums[i],nums[partitionindex]);
                partitionindex++;
            }
        }
        swap(nums[partitionindex],nums[right]);

        if(partitionindex==index){
            return nums[partitionindex];
        }
        else if(partitionindex>index){
            return quickselect(nums,left,partitionindex-1,index);
        }
        else{
            return quickselect(nums,partitionindex+1,right,index);
        }
    }
};



4) ALTERNATE
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        vector<int> count(20001, 0);  

       
        for (int num : nums) {
            count[num + 10000]++;
        }

        
        for (int i = 20000; i >= 0; --i) {
            k -= count[i];
            if (k <= 0) {
                return i - 10000;  
            }
        }

        return -1;  
    }
};




class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>> minheap;
        for(int num: nums){
            minheap.push(num);
            if(minheap.size()>k) minheap.pop();
        }
        return minheap.top();
    }
};




class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n=nums.size();
        nth_element(nums.begin(),nums.end()-k,nums.end());
        return nums[n-k];
    }
};
