DP:
class Solution {
public:
    int countSubstrings(string s) {
        int n=s.size();
        int count=0;
        vector<vector<bool>> dp(n,vector<bool>(n,false));

        for(int len=1;len<=n;len++){
            for(int i=0;i+len-1<n;i++){
                int j=i+len-1;
                if(s[i]==s[j]){
                    if(len<=2 || dp[i+1][j-1]){
                        dp[i][j]=true;
                        count++;
                    }
                }
            }
        }
        return count;
    }
};



OPTIMAL: (expand around center)
class Solution {
public:
    int countSubstrings(string s) {
        int n=s.size();
        int count=0;

        for(int center=0;center<2*n-1;center++){
            int left=center/2;
            int right=left+center%2;

            while(left>=0 && right<n && s[left]==s[right]){
                count++;
                left--;
                right++;
            }
        }
        return count;
    }
};




class Solution{
public:
    int countSubstrings(string s){
        int n=s.size();
        int count=0;
        vector<vector<bool>> dp(n,vector<bool>(n,false));

        for(int len=1;len<=n;len++){
            for(int i=0;i+len-1<n;i++){
                int j=i+len-1;
                if(s[i]==s[j]){
                    if(len<=2 || dp[i+1][j-1]){
                        dp[i][j]=true;
                        count++;
                    }
                }
            }
        }
        return count;
    }
};
