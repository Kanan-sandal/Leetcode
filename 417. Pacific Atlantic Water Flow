class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m=heights.size();
        int n=heights[0].size();
        vector<vector<int>> pacific(m,vector<int>(n,0));
        vector<vector<int>> atlantic(m,vector<int>(n,0));
        vector<vector<int>> result;

        vector<pair<int,int>> dirs={{1,0},{-1,0},{0,1},{0,-1}};

        function<void(int,int,vector<vector<int>>&)> dfs=[&](int i,int j,vector<vector<int>>& ocean){
            ocean[i][j]=1;
            for(auto[dx,dy]:dirs){
                int x=i+dx,y=j+dy;
                if(x>=0 && y>=0 && x<m && y<n && !ocean[x][y] && heights[x][y]>=heights[i][j]){
                    dfs(x,y,ocean);
                }
            }
        };
        for(int i=0;i<m;i++) dfs(i,0,pacific);
        for(int j=0;j<n;j++) dfs(0,j,pacific);

        for(int i=0;i<m;i++) dfs(i,n-1,atlantic);
        for(int j=0;j<n;j++) dfs(m-1,j,atlantic);

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j] && atlantic[i][j]){
                    result.push_back({i,j});
                }
            }
        }
        return result;
    }
};
