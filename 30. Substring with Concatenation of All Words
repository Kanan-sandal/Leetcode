class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int>result;
        if(words.empty() || s.empty()) return result;

        int wordlen=words[0].size();
        int wordcount=words.size();
        int totallen=wordlen*wordcount;

        if(s.size()<totallen) return result;

        unordered_map<string,int> need;
        for(string& w : words) need[w]++;


        for(int i=0;i<wordlen;i++){
            unordered_map<string,int> window;
            int left=i, count=0;

            for(int right=i;right+wordlen<=s.size();right+=wordlen){
                string word=s.substr(right,wordlen);

                if(need.count(word)){
                    window[word]++;
                    count++;

                    while(window[word]>need[word]){
                        string leftword=s.substr(left,wordlen);
                        window[leftword]--;
                        left+=wordlen;
                        count--;
                    }

                    if(count==wordcount){
                        result.push_back(left);
                    }
                }
                else{
                    window.clear();
                    count=0;
                    left=right+wordlen;
                }
            }
        }
    return result;
    }
};
