/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    int minMeetingRooms(vector<Interval>& intervals) {
        if(intervals.empty()) return 0;
        sort(intervals.begin(),intervals.end(),[](Interval& a,Interval& b){
            return a.start<b.start;
        });
        priority_queue<int,vector<int>,greater<int>> minheap;

        for(auto interval:intervals){
            if(!minheap.empty() && interval.start>=minheap.top()){
                minheap.pop();
            }
            minheap.push(interval.end);
        }
        return minheap.size();
    }
};
