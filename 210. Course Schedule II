class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses);
        vector<int> indegree(numCourses,0);
        for(auto& pair:prerequisites){
            int course=pair[0];
            int prereq=pair[1];
            graph[prereq].push_back(course);
            indegree[course]++;
        }
        queue<int> q;
        for(int i=0;i<numCourses;++i){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        vector<int> result;
        while(!q.empty()){
        int curr=q.front();
        q.pop();
        result.push_back(curr);
        for(int neighbor:graph[curr]){
            indegree[neighbor]--;
            if(indegree[neighbor]==0){
                q.push(neighbor);
            }
        }
        }
        if(result.size()==numCourses){
            return result;
        }else{
            return {};
        }
    }
};
